import type { Action, IResourceItem } from "@refinedev/core";
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function customTitleHandler({
  autoGeneratedTitle,
}: {
  resource?: IResourceItem | undefined;
  action?: Action | undefined;
  params?: Record<string, string | undefined> | undefined;
  pathname?: string | undefined;
  autoGeneratedTitle: string;
}) {
  const titleSections = autoGeneratedTitle.split(" | ");
  if (titleSections.length > 1)
    return `${titleSections.slice(0, -1)} | S.A.F.E.`;
  return "S.A.F.E.";
}

export class NetworkError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "Network Error";
  }
}

export async function apiFetch(endpoint: `/${string}`, init?: RequestInit) {
  // TODO: Allow passing the api url to this function.

  // The env variable is injected by Vite is expected to not end with a slash,
  // so we remove it if it's there by using the URL constructor and then
  // getting the origin property.
  const apiURL = new URL(import.meta.env.VITE_API_ORIGIN);
  // Set the Authorization header if a session token is present in local
  // storage.
  const { headers: headersInit, ...rest } = init ?? {};
  const headers = new Headers(headersInit);
  const session = localStorage.getItem(import.meta.env.VITE_SESSION_TOKEN_KEY);
  if (session) {
    headers.set("Authorization", `Bearer ${session}`);
  }
  try {
    return await fetch(`${apiURL.origin}${endpoint}`, {
      headers,
      ...rest,
    });
  } catch (_e) {
    throw new NetworkError("Could not communicate with the server.");
  }
}
